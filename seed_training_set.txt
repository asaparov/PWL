: # Cats are mammals.
{(S
	(S':mark_wide_scope
		(S'':add_plural,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative_and_factor
					(NP':require_plural,try_remove_adv,require_no_correlator,require_predicative_universal
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "cat"/"Cats")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_empty_ref,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"are")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_plural
					(NP:require_no_preposition,require_no_inverse,select_right_arg2_without_head_predicative_and_factor
						(NP':require_plural,try_remove_adv,require_no_correlator,require_predicative_existential,require_wide_scope
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "mammal"/"mammals")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
#	{![x]:((U(0,x) & cat(x)) => ?[s]:((arg1(s)=x) & U(1,s) & same(s) & present(s) & ?[m]:(U(2,m) & mammal(m) & (arg2(s)=m))))};
	{![x]:(cat(x) => ?[s]:((arg1(s)=x) & same(s) & present(s) & ?[m]:(mammal(m) & (arg2(s)=m))))};

: Cats are mammals.
	{![x]:(cat(x) => ?[s]:((arg1(s)=x) & same(s) & present(s) & ?[m]:(mammal(m) & (arg2(s)=m))))};

#: 4 cats sleep.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & present(s))))};

#: 4 cats slept.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & past(s))))};

#: 4 cats will have been sleeping.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & future_perfect_progressive(s))))};

# >> There are 7.7 billion people.
#	{?[P]:(P=^[x]:(U(0,x) & person(x)) & size(P)=7700000000)}
#
# >> There are 7,700,000,000 people.
#	{?[P]:(P=^[x]:(U(0,x) & person(x)) & size(P)=7700000000)}
#
# >> All cats are mammals.
#	{![x]:(U(0,x) & cat(x) => ?[t]:(type(t) & present(t) & arg2(t)=mammal & arg1(t)=x))}
#
# >> Every cat is a mammal.
#	{![x]:(U(0,x) & cat(x) => ?[t]:(type(t) & present(t) & arg2(t)=mammal & arg1(t)=x))}
#
# >> Every farmer who owns a donkey beats it.
#	{![f]:(U(0,f) & farmer(f) & ?[d]:(U(0,d) & donkey(d) & ?[o]:(own(o) & present(o) & arg1(o)=f & arg2(o)=d)) => ?[i]:(U(0,i) & ref(i) & ?[b]:(arg1(b)=f & beat(b) & present(b) & arg2(b)=i)))}
#
# >> It was Jessie Bear's birthday.
#	{?[i]:(U(0,i) & ref(i) & ?[b]:(arg1(b)=jessie & birthday(b) & past(b) & arg2(b)=i))}
#	{i=today}
#
#	She was having a party.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[h]:(arg1(h)=s & have(h) & present_progressive(h) & ?[p]:(U(1,p) & party(p) & arg2(h)=p))}
#	{s=jessie}
#
#	She asked her two best friends to come to the party.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[h]:(U(1,h) & female_ref(1,h) & ?[B]:(B=^[x]:(U(2,x) & ?[b]:(arg1(b)=h & best_friend(b) & arg2(b)=x)) & size(B)=2 & ![x]:(B(x) => ?[a]:(arg1(a)=s & ask(a) & past(a) & ?[g]:(go(g) & arg2(a)=g & ?[p]:(U(3,p) & party(p) & arg2(g)=p)))))))}
#	{s=jessie,h=jessie}
#
#	She made a big cake, and hung up some balloons.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[m]:(arg1(m)=s & make(m) & past(m) & ?[c]:(U(1,c) & cake(c) & ?[b]:(is_big(b) & arg1(b)=c) & arg2(m)=c)) & ?[B]:(subset(B,^[b]:(U(2,b) & balloon(b))) & ![b]:(B(b) => ?[h]:(arg1(h)=s & hang(h) & past(h) & arg2(h)=b))))}
#	{s=jessie}
#
#	Soon her friend Lion came over.
#	{?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=lion)) & ?[c]:(soon(c) & arg1(c)=lion & come_over(c) & past(c))}
#	#  [OR]
#	# {?[l]:(l=lion & ?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=l)) & ?[c]:(soon(c) & arg1(c)=l & come_over(c) & past(c)))}
#	{h=jessie}
#
#	Then her friend Tiger came over.
#	{?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=tiger)) & ?[c]:(then(c) & arg1(c)=tiger & come_over(c) & past(c))}
#	#  [OR]
#	# {?[t]:(t=tiger & ?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=t)) & ?[c]:(then(c) & arg1(c)=t & come_over(c) & past(c)))}
#	{h=jessie}
#
#	Lion and Tiger brought presents with them.
#	# TODO: continue relabeling from here
#	{?[S]:(S=^[x]:(x=lion | x=tiger) & ![x]:(S(x) => ?[P]:(subset(P,^[p]:(present(p))) & ![p]:(P(p) => with(bring,x)(x,p)))))}
#
#	Jessie hugged her friends.
#	{(female(#1) & ?[F]:(subset(F,^[f]:(friend(f,#1)))) & ![f]:(F(f) => hug(jessie,f)))}
#	{#1=jessie}
#
#	She asked them if they would like to have cake.
#	{female(#1) & ![s]:(#2(s) => ask(#1,want(s,?[c]:(cake(c) & have(s,c)))))}
#	{#1=jessie}
#
#	Yes! said Lion.
#	{say(lion,T)}
#
#	Yes yes! said Tiger.
#	{say(tiger,T & T)}
#
#	Jessie cut the cake, and they all ate it together.
#	{?[c]:(cake(c) & cut(jessie,c)) & ![x]:(#1(x) => together(eat)(x,#2))}
#	{#1=^[y]:(y=jessie | y=lion | y=tiger)}
#
#	Then Jessie opened her presents.
#	{?[P]:(P=^[p]:(female(#1) & belongs(p,#1) & present(p)) & ![p]:(P(p) => then(open)(jessie,p)))}
#
#	She got a new jump rope and a fun game.
#	{female(#1) & ?[y]:(new(y) & jump_rope(y) & receive(#1,y)) & ?[y]:(fun(y) & game(y) & receive(#1,y))}
#	{#1=jessie}
#
#	She asked Lion and Tiger to play the game with her.
#	{female(#1) & ?[S]:(S=^[s]:(s=lion | s=tiger) & ![s]:(S(s) => ask(#1,![g]:(game(g) & with(play,#1)(s,g)))))}
#	{#1=jessie}
#
#	The friends played and played.
#	{?[F]:(clique(F,^[a,b]:friend(a,b)) & ![f]:(F(f) => play(f) & play(f)))}
#
#	They all had a good time.
#	{![s]:(#1(s) => happy(s))}
#	{#1=^[y]:(y=jessie | y=lion | y=tiger)}
#
#	Soon it was time for the party to be over.
#	{?[t]:(soon(t) & time(t) & ?[p]:(party(p) & t=end(p)))}
#
#	Lion and Tiger hugged Jessie and said goodbye to her.
#	{?[S]:(S=^[s]:(s=lion | s=tiger) & ![s]:(S(s) => hug(s,jessie) & ?[g]:(valediction(g) & to(say,#1)(s,g))))}
#	{#1=jessie}
#
#	Thanks for a great birthday! Jessie Bear told her two best friends.
#	{?[B]:(female(#1) & B=best_friends(#1) & size(B,2) & ![b]:(B(b) => to(say,b)(jessie,?[t]:(thanks(t) & ?[y]:(great(y) & birthday(y) & for(t,y))))))}
#	{#1=jessie}
#
# >> Who was having a birthday?
#	{^[x]:(today=birthday_of(x))}
#	{^[x]:(?[b]:(birthday(b) & have(x,b)))}
#
# >> Who didn't come to the party?
#	{^[x]:(?[p]:(party(p) & ~go(x,p)))}
#
# >> How did Jessie get ready for the party?
#	{?[p]:(party(p) & how(prepare,x)(jessie,p)))}
#
# >> How many friends came to Jessie's party?
#	{^[x]:(?[F]:(clique(F,^[a,b]:friend(a,b)) & size(F)=x & ?[p]:(have(jessie,p) & party(p) & ![f]:(F(f) => go(f,p)))))}
