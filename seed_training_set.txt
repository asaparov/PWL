: # Cats are mammals.
{(S
	(S':mark_wide_scope
		(S'':add_plural,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NP':require_plural,try_remove_adv,require_no_correlator,require_predicative_universal
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "cat"/"Cats")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"are")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_plural
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(NP':require_plural,try_remove_adv,require_no_correlator,require_predicative_existential,require_wide_scope
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "mammal"/"mammals")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
#	{![x]:((U(0,x) & cat(x)) => ?[s]:((arg1(s)=x) & U(1,s) & same(s) & present(s) & ?[m]:(U(2,m) & mammal(m) & (arg2(s)=m))))};
	{![x]:(cat(x) => ?[m]:(mammal(m) & ?[s]:((arg1(s)=x) & same(s) & present(s) & (arg2(s)=m))))};

: # Mercury is a planet in the Solar System.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "Mercury"/"Mercury")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(A "a")
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
							(NOMINAL_R:identity
								(NOMINAL_R:try_remove_genitive,remove_right_conjunct_in_set
									(NOMINAL_L:identity
										(N:require_no_correlator,select_predicate_in_set "planet"/"planet")
									)
								)
								(N_ADJUNCT:try_remove_correlated,select_right_conjunct_in_set,try_remove_number,add_singular
									(PP:try_remove_correlated,select_right_arg1_of_without_head
										(P:require_no_preposition,remove_right_conjunct "in")
										(NP:try_remove_correlated,try_remove_is_adjunct,select_right_arg2_without_head_predicative,factor_predicative
											(DEF_NP:try_remove_adv,require_no_correlator
												(THE "the")
												(NP':try_remove_correlated
													(NOMINAL_R:identity
														(NOMINAL_L:identity
															(N:require_no_correlator,select_predicate_in_set "Solar System"/"Solar System")
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[p]:(planet(p) & ?[l]:(location(l) & (arg2(l)=solar_system) & (arg1_of(p)=l)) & ?[s]:((arg1(s)=mercury) & same(s) & present(s) & (arg2(s)=p)))};

: # Neptune is one of the 8 planets in the solar system.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "Neptune"/"Neptune")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_singleton
							(NOMINAL_R:identity
								(NOMINAL_R:try_remove_genitive,remove_right_conjunct_in_set
									(NOMINAL_L:identity
										(NUMBER:require_no_correlator,set_size "one"/"one")
									)
								)
								(OF "of")
								(NP:try_remove_correlated,select_right_subset_in_set,try_remove_number,require_no_constant_in_set,add_plural
									(DEF_NP:try_remove_adv,require_no_correlator
										(THE "the")
										(NP':try_remove_correlated
											(Q:try_remove_genitive,select_second_left_set_conjunct_root
												(NUMBER:size "8"/"8")
											)
											(NOMINAL_R:try_remove_correlated,remove_second_left_set_conjunct
												(NOMINAL_R:try_remove_genitive,remove_right_conjunct_in_set
													(NOMINAL_L:identity
														(N:require_no_correlator,select_predicate_in_set "planet"/"planets")
													)
												)
												(N_ADJUNCT:try_remove_correlated,select_right_conjunct_in_set,try_remove_number,add_singular
													(PP:try_remove_correlated,select_right_arg1_of_without_head
														(P:require_no_preposition,remove_right_conjunct "in")
														(NP:try_remove_correlated,try_remove_is_adjunct,select_right_arg2_without_head_predicative,factor_predicative
															(DEF_NP:try_remove_adv,require_no_correlator
																(THE "the")
																(NP':try_remove_correlated
																	(NOMINAL_R:identity
																		(NOMINAL_L:identity
																			(N:require_no_correlator,select_predicate_in_set "solar system"/"solar system")
																		)
																	)
																)
															)
														)
													)
												)
											)
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[P]:((P=^[p]:(planet(p) & ?[l]:(location(l) & (arg2(l)=solar_system) & (arg1_of(p)=l)))) & (size(P)=8) & ?[S]:(subset(S,^[x]:P(x)) & (size(S)=1) & ?[x]:(S(x) & ?[s]:((arg1(s)=neptune) & same(s) & present(s) & (arg2(s)=x)))))};

: # United States
{(N "United States"/"United States")}
	{usa[index:sg]};

: # United States of America
{(N "United States of America"/"United States of America")}
	{usa[index:sg]};

: # US
{(N "US"/"US")}
	{usa[index:sg]};

: # USA
{(N "USA"/"USA")}
	{usa[index:sg]};

: # state
{(N "state"/"state")}
	{state[index:sg]};

: # New York
{(N "New York"/"New York")}
	{ny[index:sg]};

: # New York
{(N "New York"/"New York")}
	{nyc[index:sg]};

: # New York City
{(N "New York City"/"New York City")}
	{nyc[index:sg]};

: # NYC
{(N "NYC"/"NYC")}
	{nyc[index:sg]};

: # There are four large planets.
{(S
	(S':mark_wide_scope
		(S'':add_plural,require_no_conjunction,try_remove_is_adjunct
			(THERE "there")
			(VP_R:try_remove_nullable_subject,require_no_lambda,try_remove_correlated,require_no_correlator,require_left_predicate_exist
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"are")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_plural
					(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
						(NP':require_plural,try_remove_adv,require_no_correlator,require_predicative_universal
							(Q:try_remove_genitive,select_second_left_set_conjunct_root 
								(NUMBER:size "four"/"four")
							)
							(NOMINAL_R:try_remove_correlated,remove_second_left_set_conjunct
								(NOMINAL_L:identity
									(ADJP_R:try_remove_genitive,select_left_conjunct_in_set,select_right_arg1_of_without_head
										(ADJP_L:try_remove_is_adjunct
											(ADJ:require_no_correlator "large"/"large")
										)
									)
									(NOMINAL_L:try_remove_correlated,remove_left_conjunct_in_set
										(N:require_no_correlator,select_predicate_in_set "planet"/"planets")
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[X]:((X=^[x]:(?[l]:(large(l) & (arg1_of(x)=l)) & planet(x))) & (size(X)=4) & ![x]:(X(x) => ?[e]:(exist(e) & present(e) & (arg1(e)=x))))};

: # Each cat is a mammal.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(EACH "each")
					(NOMINAL_R:require_singular,require_no_adv,try_remove_correlated,require_no_correlator,require_predicative_universal
						(NOMINAL_L:identity
							(N:require_no_correlator,select_predicate_in_set "cat"/"cat")
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(A "a")
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "mammal"/"mammal")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{![x]:(cat(x) => ?[m]:(mammal(m) & ?[s]:((arg1(s)=x) & same(s) & present(s) & (arg2(s)=m))))};

: # Each mammal is female or male.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(EACH "each")
					(NOMINAL_R:require_singular,require_no_adv,try_remove_correlated,require_no_correlator,require_predicative_universal
						(NOMINAL_L:identity
							(N:require_no_correlator,select_predicate_in_set "mammal"/"mammal")
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:select_left_predicate_and_tense,set_predicate_empty,factor
					(VP_L:identity
						(BE:require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,empty_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:remove_second_left_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(ADJP_R:remove_wide_scope,add_is_adjunct,require_no_preposition,require_singular
						(ADJP_R:require_disjunction,select_left_operand
							(ADJP_L:try_remove_is_adjunct
								(ADJ:require_no_correlator "female"/"female")
							)
						)
						(ADJP_COORDINATION:try_remove_correlator,remove_left_operand,add_or
							(OR "or")
							(ADJP_R:remove_or,require_no_comma
								(ADJP_L:try_remove_is_adjunct
									(ADJ:require_no_correlator "male"/"male")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{![x]:(mammal(x) => (?[f]:((arg1(f)=x) & female(f) & present(f)) | ?[m]:((arg1(m)=x) & male(m) & present(m))))};

: # One planet is Earth.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_singleton
						(Q:try_remove_genitive,select_second_left_set_conjunct_root
							(NUMBER:size "one")
						)
						(NOMINAL_R:try_remove_correlated,remove_second_left_set_conjunct,replace_predicative_subset_with_equality
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "planet"/"planet")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "Earth"/"Earth")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[P]:(subset(P,^[p]:planet(p)) & (size(P)=1) & ?[x]:(P(x) & ?[s]:((arg1(s)=x) & same(s) & present(s) & (arg2(s)=earth))))};

: # Jupiter is large.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "Earth"/"Earth")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:select_left_predicate_and_tense,set_predicate_empty,factor
					(VP_L:identity
						(BE:require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,empty_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:remove_second_left_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(ADJP_R:remove_wide_scope,add_is_adjunct,require_no_preposition,require_singular
						(ADJP_L:try_remove_is_adjunct
							(ADJ:require_no_correlator "large"/"large")
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[l]:((arg1(l)=jupiter) & large(l) & present(l))};

# TODO: add this is a training example; currently (as of Feb 7) our parser wants to parse this as ?[f]:(?[x]:(mammal(x) & (arg1(f)=x)) & female(f) & present(f)) | ?[m]:(?[x]:(mammal(x) & (arg1(m)=x)) & male(m) & present(m))
#: # A mammal is female or male.
#{(S
#	(S':mark_wide_scope
#		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
#			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
#				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
#					(A "a")
#					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
#						(NOMINAL_R:identity
#							(NOMINAL_L:identity
#								(N:require_no_correlator,select_predicate_in_set "mammal"/"mammal")
#							)
#						)
#					)
#				)
#			)
#			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
#				(VP_R:select_left_predicate_and_tense,set_predicate_empty,factor
#					(VP_L:identity
#						(BE:require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,empty_and_tense "be"/"is")
#					)
#				)
#				(V_ADJUNCT:remove_second_left_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
#					(ADJP_R:remove_wide_scope,add_is_adjunct,require_no_preposition,require_singular
#						(ADJP_R:require_disjunction,select_left_operand
#							(ADJP_L:try_remove_is_adjunct
#								(ADJ:require_no_correlator "female"/"female")
#							)
#						)
#						(ADJP_COORDINATION:try_remove_correlator,remove_left_operand,add_or
#							(OR "or")
#							(ADJP_R:remove_or,require_no_comma
#								(ADJP_L:try_remove_is_adjunct
#									(ADJ:require_no_correlator "male"/"male")
#								)
#							)
#						)
#					)
#				)
#			)
#		)
#	)
#	(PERIOD ".")
#)}
#	{?[x]:(mammal(x) & (?[f]:((arg1(f)=x) & female(f) & present(f)) | ?[m]:((arg1(m)=x) & male(m) & present(m))))};

: # river
{(N "river"/"river")}
	{river[index:sg]};

: # mountain
{(N "mountain"/"mountain")}
	{mountain[index:sg]};

: # country
{(N "country"/"country")}
	{country[index:sg]};

: # city
{(N "city"/"city")}
	{city[index:sg]};

: # town
{(N "town"/"town")}
	{town[index:sg]};

: # county
{(N "county"/"county")}
	{county[index:sg]};

: # major
{(ADJ "major"/"major")}
	{?[x]:major(x)};

: # big
{(ADJ "big"/"big")}
	{?[x]:large(x)};

: # small
{(ADJ "small"/"small")}
	{?[x]:small(x)};

: # little
{(ADJ "little"/"little")}
	{?[x]:small(x)};

: # Mercury is a planet and Neptune is a planet.
{(S
	(S':mark_wide_scope
		(S':require_conjunction,select_left_operand
			(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
				(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
					(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "Mercury"/"Mercury")
								)
							)
						)
					)
				)
				(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
					(VP_R:remove_right_conjunct
						(VP_L:identity
							(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
						)
					)
					(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
						(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
							(A "a")
							(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
								(NOMINAL_R:identity
									(NOMINAL_L:identity
										(N:require_no_correlator,select_predicate_in_set "planet"/"planet")
									)
								)
							)
						)
					)
				)
			)
		)
		(S_COORDINATION:try_remove_correlator,remove_left_operand,add_and
			(AND "and")
			(S':remove_and,require_no_comma
				(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
					(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
						(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
							(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_constant_in_set
								(NOMINAL_R:identity
									(NOMINAL_L:identity
										(N:require_no_correlator,select_predicate_in_set "Neptune"/"Neptune")
									)
								)
							)
						)
					)
					(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
						(VP_R:remove_right_conjunct
							(VP_L:identity
								(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
							)
						)
						(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
							(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
								(A "a")
								(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
									(NOMINAL_R:identity
										(NOMINAL_L:identity
											(N:require_no_correlator,select_predicate_in_set "planet"/"planet")
										)
									)
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[p]:(planet(p) & ?[s]:((arg1(s)=mercury) & same(s) & present(s) & (arg2(s)=p))) & ?[p]:(planet(p) & ?[s]:((arg1(s)=neptune) & same(s) & present(s) & (arg2(s)=p)))};

: # No mammal is a fish.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(NO "no")
					(NOMINAL_R:try_remove_adv,try_remove_correlated,require_no_correlator,add_negative,remove_predicative_not,require_predicative_existential
						(NOMINAL_L:identity
							(N:require_no_correlator,select_predicate_in_set "mammal"/"mammal")
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "be"/"is")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(A "a")
						(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
							(NOMINAL_R:identity
								(NOMINAL_L:identity
									(N:require_no_correlator,select_predicate_in_set "fish"/"fish")
								)
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{~?[m]:(mammal(m) & ?[f]:(fish(f) & ?[s]:((arg1(s)=m) & same(s) & present(s) & (arg2(s)=f))))};

: # A nucleus inhabits every eukaryote.
{(S
	(S':mark_wide_scope
		(S'':add_singular,require_no_conjunction,try_remove_is_adjunct
			(V_ADJUNCT:try_remove_nullable_subject,require_no_subordinate,try_remove_correlator,select_left_conjunct
				(NP:require_no_preposition,require_no_inverse,try_remove_req_aux,select_right_arg1_without_head_predicative,factor_predicative
					(A "a")
					(NP':require_singular,try_remove_adv,require_no_correlator,require_predicative_existential,require_no_constant_in_set
						(NOMINAL_R:identity
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "nucleus"/"nucleus")
							)
						)
					)
				)
			)
			(VP_R:try_remove_nullable_subject,try_remove_correlated,remove_left_conjunct
				(VP_R:remove_right_conjunct
					(VP_L:identity
						(V:require_no_empty_ref,require_no_future,require_no_perfect,require_no_progressive,require_no_inverse,require_no_req_aux,require_no_to_infinitive,require_no_correlator,predicate_and_tense "inhabit"/"inhabits")
					)
				)
				(V_ADJUNCT:select_right_conjunct,try_remove_correlated,try_remove_correlator,try_remove_aux,try_remove_number,add_singular
					(NP:require_no_preposition,require_no_inverse,require_no_left_predicate_exist,select_right_arg2_without_head_predicative,factor_predicative
						(EACH "every")
						(NOMINAL_R:require_singular,require_no_adv,try_remove_correlated,require_no_correlator,require_predicative_universal
							(NOMINAL_L:identity
								(N:require_no_correlator,select_predicate_in_set "eukaryote"/"eukaryote")
							)
						)
					)
				)
			)
		)
	)
	(PERIOD ".")
)}
	{?[n]:(nucleus(n) & ![e]:(eukaryote(e) => ?[l]:((arg1(l)=n) & location(l) & present(l) & (arg2(l)=e))))};

#: 4 cats sleep.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & present(s))))};

#: 4 cats slept.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & past(s))))};

#: 4 cats will have been sleeping.
#	{?[X]:(subset(X,^[x]:(U(0,x) & cat(x))) & size(X)=4 & ![x]:(X(x) => ?[s]:(arg1(s)=x & U(1,s) & sleep(s) & future_perfect_progressive(s))))};

# >> There are 7.7 billion people.
#	{?[P]:(P=^[x]:(U(0,x) & person(x)) & size(P)=7700000000)}
#
# >> There are 7,700,000,000 people.
#	{?[P]:(P=^[x]:(U(0,x) & person(x)) & size(P)=7700000000)}
#
# >> All cats are mammals.
#	{![x]:(U(0,x) & cat(x) => ?[t]:(type(t) & present(t) & arg2(t)=mammal & arg1(t)=x))}
#
# >> Every cat is a mammal.
#	{![x]:(U(0,x) & cat(x) => ?[t]:(type(t) & present(t) & arg2(t)=mammal & arg1(t)=x))}
#
# >> Every farmer who owns a donkey beats it.
#	{![f]:(U(0,f) & farmer(f) & ?[d]:(U(0,d) & donkey(d) & ?[o]:(own(o) & present(o) & arg1(o)=f & arg2(o)=d)) => ?[i]:(U(0,i) & ref(i) & ?[b]:(arg1(b)=f & beat(b) & present(b) & arg2(b)=i)))}
#
# >> It was Jessie Bear's birthday.
#	{?[i]:(U(0,i) & ref(i) & ?[b]:(arg1(b)=jessie & birthday(b) & past(b) & arg2(b)=i))}
#	{i=today}
#
#	She was having a party.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[h]:(arg1(h)=s & have(h) & present_progressive(h) & ?[p]:(U(1,p) & party(p) & arg2(h)=p))}
#	{s=jessie}
#
#	She asked her two best friends to come to the party.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[h]:(U(1,h) & female_ref(1,h) & ?[B]:(B=^[x]:(U(2,x) & ?[b]:(arg1(b)=h & best_friend(b) & arg2(b)=x)) & size(B)=2 & ![x]:(B(x) => ?[a]:(arg1(a)=s & ask(a) & past(a) & ?[g]:(go(g) & arg2(a)=g & ?[p]:(U(3,p) & party(p) & arg2(g)=p)))))))}
#	{s=jessie,h=jessie}
#
#	She made a big cake, and hung up some balloons.
#	{?[s]:(U(0,s) & female_ref(0,s) & ?[m]:(arg1(m)=s & make(m) & past(m) & ?[c]:(U(1,c) & cake(c) & ?[b]:(is_big(b) & arg1(b)=c) & arg2(m)=c)) & ?[B]:(subset(B,^[b]:(U(2,b) & balloon(b))) & ![b]:(B(b) => ?[h]:(arg1(h)=s & hang(h) & past(h) & arg2(h)=b))))}
#	{s=jessie}
#
#	Soon her friend Lion came over.
#	{?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=lion)) & ?[c]:(soon(c) & arg1(c)=lion & come_over(c) & past(c))}
#	#  [OR]
#	# {?[l]:(l=lion & ?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=l)) & ?[c]:(soon(c) & arg1(c)=l & come_over(c) & past(c)))}
#	{h=jessie}
#
#	Then her friend Tiger came over.
#	{?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=tiger)) & ?[c]:(then(c) & arg1(c)=tiger & come_over(c) & past(c))}
#	#  [OR]
#	# {?[t]:(t=tiger & ?[h]:(U(0,h) & female_ref(0,h) & ?[f]:(friend(f) & arg1(f)=h & arg2(f)=t)) & ?[c]:(then(c) & arg1(c)=t & come_over(c) & past(c)))}
#	{h=jessie}
#
#	Lion and Tiger brought presents with them.
#	# TODO: continue relabeling from here
#	{?[S]:(S=^[x]:(x=lion | x=tiger) & ![x]:(S(x) => ?[P]:(subset(P,^[p]:(present(p))) & ![p]:(P(p) => with(bring,x)(x,p)))))}
#
#	Jessie hugged her friends.
#	{(female(#1) & ?[F]:(subset(F,^[f]:(friend(f,#1)))) & ![f]:(F(f) => hug(jessie,f)))}
#	{#1=jessie}
#
#	She asked them if they would like to have cake.
#	{female(#1) & ![s]:(#2(s) => ask(#1,want(s,?[c]:(cake(c) & have(s,c)))))}
#	{#1=jessie}
#
#	Yes! said Lion.
#	{say(lion,T)}
#
#	Yes yes! said Tiger.
#	{say(tiger,T & T)}
#
#	Jessie cut the cake, and they all ate it together.
#	{?[c]:(cake(c) & cut(jessie,c)) & ![x]:(#1(x) => together(eat)(x,#2))}
#	{#1=^[y]:(y=jessie | y=lion | y=tiger)}
#
#	Then Jessie opened her presents.
#	{?[P]:(P=^[p]:(female(#1) & belongs(p,#1) & present(p)) & ![p]:(P(p) => then(open)(jessie,p)))}
#
#	She got a new jump rope and a fun game.
#	{female(#1) & ?[y]:(new(y) & jump_rope(y) & receive(#1,y)) & ?[y]:(fun(y) & game(y) & receive(#1,y))}
#	{#1=jessie}
#
#	She asked Lion and Tiger to play the game with her.
#	{female(#1) & ?[S]:(S=^[s]:(s=lion | s=tiger) & ![s]:(S(s) => ask(#1,![g]:(game(g) & with(play,#1)(s,g)))))}
#	{#1=jessie}
#
#	The friends played and played.
#	{?[F]:(clique(F,^[a,b]:friend(a,b)) & ![f]:(F(f) => play(f) & play(f)))}
#
#	They all had a good time.
#	{![s]:(#1(s) => happy(s))}
#	{#1=^[y]:(y=jessie | y=lion | y=tiger)}
#
#	Soon it was time for the party to be over.
#	{?[t]:(soon(t) & time(t) & ?[p]:(party(p) & t=end(p)))}
#
#	Lion and Tiger hugged Jessie and said goodbye to her.
#	{?[S]:(S=^[s]:(s=lion | s=tiger) & ![s]:(S(s) => hug(s,jessie) & ?[g]:(valediction(g) & to(say,#1)(s,g))))}
#	{#1=jessie}
#
#	Thanks for a great birthday! Jessie Bear told her two best friends.
#	{?[B]:(female(#1) & B=best_friends(#1) & size(B,2) & ![b]:(B(b) => to(say,b)(jessie,?[t]:(thanks(t) & ?[y]:(great(y) & birthday(y) & for(t,y))))))}
#	{#1=jessie}
#
# >> Who was having a birthday?
#	{^[x]:(today=birthday_of(x))}
#	{^[x]:(?[b]:(birthday(b) & have(x,b)))}
#
# >> Who didn't come to the party?
#	{^[x]:(?[p]:(party(p) & ~go(x,p)))}
#
# >> How did Jessie get ready for the party?
#	{?[p]:(party(p) & how(prepare,x)(jessie,p)))}
#
# >> How many friends came to Jessie's party?
#	{^[x]:(?[F]:(clique(F,^[a,b]:friend(a,b)) & size(F)=x & ?[p]:(have(jessie,p) & party(p) & ![f]:(F(f) => go(f,p)))))}
